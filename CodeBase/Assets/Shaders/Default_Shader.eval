#version 440 core
layout(quads, equal_spacing, ccw) in;
layout (binding = 0, rgba8) uniform coherent image2D exportTexture;

struct Chunk
{
	float height;
	float seed;
	float frequency;
	int primitive;
	int octaves;
	int neighbourID;
};

uniform mat4 View;
uniform mat4 Projection;
uniform mat4 Model;
uniform float chunkSeed;
uniform int gridSize;

uniform Chunk neighbours[8];
uniform int numNeighbours;

uniform float chunkHeight;

in vec3 WorldPos_ES_in[];
in vec3 Normal_ES_in[];
in vec3 Color_ES_in[];

out vec3 WorldPos_FS_in;
out float MapPos_FS_in;
out vec3 Blend_Normal_FS_in;
out vec3 Normal_FS_in;
out vec3 Color_FS_in;
vec3 texColor_FS_in;

out vec3 TFPosition;
out vec3 TFNormal;
out vec3 TFColor;
out vec2 uvCoords;

uniform sampler2D heightmap;
uniform sampler2D outputTexture;

uniform float delta;
uniform float chunkFreq;
uniform int chunkOctaves;
uniform float divisions;

int mixType;
ivec3 neighIDs;

uniform int primitive;

uniform vec2 chunkCoords;
uniform int selected;
uniform float maxHeight;


vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2,vec3 v3)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

float rand(vec2 n, float seed) 
{ 
    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * (43758.5453+seed));
}

vec2 Hash_1(vec2 c, float seed)
{
    //Non Correlated coords
	float x = fract(sin(dot(vec2(float(c.x),float(c.y)) ,vec2(12.9898,78.233))) * (43758.5453+seed));
    float y = fract(sin(dot(c+0.5 ,vec2(12.9898,78.233))) * (43758.5453+seed));
    
    //returning the value converted from range [0,1.0] to [-1.0,1.0]
	return vec2(2.0*x-1.0,2.0*y-1.0);
}

vec2 Hash_2( in vec2 x, float seed)  // from https://www.shadertoy.com/view/XdXGW8
{
    vec2 k = vec2( 0.3183099+seed, 0.3678794+seed);
    x = x*k + k.yx;
    return normalize(-1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) ));
}

//Random Values between 0 & 1
vec2 Random(vec2 c, float seed)
{
    //Non Correlated coords
	float x = fract(sin(dot(c ,vec2(12.9898,78.233))) * (43758.5453+seed));
    float y = fract(sin(dot(c+0.5 ,vec2(12.9898,78.233))) * (43758.5453+seed));
    
	return vec2(x,y);
}

float Bnoise(vec2 vertexCoords, float frequency, float freq, float seed)
{	
    vec2 uv = vertexCoords*freq*frequency;
    vec2 tile = floor(uv);
    
    vec2 tile_right = vec2(tile.x+1.0,tile.y);
    vec2 tile_up = vec2(tile.x,tile.y+1.0);
    vec2 tile_diag = vec2(tile.x+1.0,tile.y+1.0);

    float tileColor_1 = rand(tile, seed);
    float tileColor_2 = rand(tile_right, seed);
    float tileColor_3 = rand(tile_up, seed);
    float tileColor_4 = rand(tile_diag, seed);
    
    float mixFactor_x=smoothstep(0.0,1.0,fract(uv.x));
    
    float mix_1=mix(tileColor_1,tileColor_2,mixFactor_x);
    float mix_2=mix(tileColor_3,tileColor_4,mixFactor_x);
    
    float mixFactor_y = smoothstep(0.0,1.0,fract(uv.y));

    float finalMix=mix(mix_1,mix_2,mixFactor_y);
    
    return finalMix;
}

float BrownianNoise(float x, float y, int octaves,float freq,float seed)
{
    float height = 0.0;
    float a =0.5;
    float f=1.0;
	vec2 coords = vec2(x,y)+chunkCoords;
    
    for(int i=0; i<octaves;i++)
    {
        height += a*Bnoise(coords,f,freq,seed);
        a*=0.5;
        f*=2.0;
    }
    
    return height;
}

float Pnoise(vec2 fragCoord, float frequency,float freq,float seed)
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord;
    //turnin to Range [0,10] = [0,..,0.1,..,0.2,....9.8,..,9.9,..,10.0]
    uv*=freq*frequency;
    //Converting decimals to integers [1,1,1,.....2,2,2,....,10,10,10]
    vec2 tile = floor(uv);
    
    //Bottom Left Corner
    vec2 botLeft = tile;						//Tile Coords
    vec2 botLeftG = Hash_1(botLeft,seed);				//Setting Random Gradient 
    vec2 offsetBL = uv - botLeft;				//Distance vector from coords to Corner (Now yes :D)
    float dotBL=dot(botLeftG,offsetBL);			//Dot between distance and Corner
    
    //Bottom Right Corner
    vec2 botRight = tile+vec2(1.0,0.0);
    vec2 botRightG = Hash_1(botRight,seed);
    vec2 offsetBR = uv - botRight;
    float dotBR=dot(botRightG,offsetBR);
    
    //Top Left Corner
    vec2 topLeft = tile+vec2(0.0,1.0);
    vec2 topLeftG = Hash_1(topLeft,seed);
    vec2 offsetTL = uv - topLeft;
    float dotTL=dot(topLeftG,offsetTL);
    
    //Top Left Corner
    vec2 topRight = tile+vec2(1.0,1.0);
    vec2 topRightG = Hash_1(topRight,seed);
    vec2 offsetTR = uv - topRight;
    float dotTR=dot(topRightG,offsetTR);
    
    
    float mixFactor_x=smoothstep(0.0,1.0,fract(uv.x)); //mix factor depending on the x coords 
    float mixFactor_y=smoothstep(0.0,1.0,fract(uv.y)); //mix factor depending on the y coords 

    
    float RLBR = mix(dotBL,dotBR,mixFactor_x);
    float TLTR = mix(dotTL,dotTR,mixFactor_x);
    
    float total = mix(RLBR,TLTR,mixFactor_y);

    return (total+1.0)*0.5;
}

//Different Levels of Detail 
float PerlinNoise(float x, float y, int octaves,float freq,float seed)
{
    float height = 0.0;
    float a =0.5;
    float f=1.0;
	vec2 coords = vec2(x,y)+chunkCoords;
    
   	for(int i=0; i<octaves;i++)
   	{
    	height += a*Pnoise(coords,f,freq,seed);
        a*=0.5;
        f*=2.0;
   	}
    
    return height;
}

float Vnoise(vec2 fragCoord,float frequency,float freq, float seed)
{
	vec2 uv = fragCoord;
    uv = uv * freq * frequency;
    
    vec2 g = floor(uv), tile; uv -= g;
	
	vec3 d = vec3(10); // 1.4, etc. "d.z" holds the distance comparison value.
    
	for(int y = -1; y <= 1; y++){
		for(int x = -1; x <= 1; x++){
            
            //Position
			tile = vec2(x, y);
            
            // Distance to random center
            tile += Random(g + tile, seed) - uv;
            
            //Absolute ditsnce
			d.z = dot(tile,tile); 
            
            d.y = max(d.x, min(d.y, d.z));
            d.x = min(d.x, d.z); 
		}
	}
	
    return max(d.y/1.2 - d.x*1., 0.)/1.2;; 
}

//Accumulative noise
float VoronoiNoise(float x, float y, int octaves,float freq,float seed)
{
	float height = 0.0;
    float a =0.5;
    float f=1.0;

	vec2 coords = vec2(x,y)+chunkCoords;
    
   	for(int i=0; i<octaves;i++)
   	{
    	height += a*Vnoise(coords,f,freq,seed);
        a*=0.5;
        f*=2.0;
   	}
    
    return height;
}

float ReadHeightmap(float x, float y)
{	
	return texture(heightmap,(vec2(x,y)+chunkCoords)/gridSize).x;
}

//     U 
//     |     
//L -- M -- R
//     |     
//     D 

vec3 GetVertex(float deltaX, float deltaY)
{	
	vec3 p1 = mix(WorldPos_ES_in[0], WorldPos_ES_in[1], gl_TessCoord.x+deltaX);
	vec3 p2 = mix(WorldPos_ES_in[3], WorldPos_ES_in[2], gl_TessCoord.x+deltaX);
	
	return mix(p1, p2, gl_TessCoord.y+deltaY);
}

float GetHeight(float x, float y, int octaves, int prim,float freq,float seed)
{
	float ret = 0.0;
	
	if(prim==1)
	{
		ret = BrownianNoise(x,y,octaves,freq,seed);		
	}
	else if(prim==2)
	{
		ret = PerlinNoise(x,y,octaves,freq,seed);
	}
	else if(prim==3)
	{
		ret = VoronoiNoise(x,y,octaves,freq,seed);
	}
	else if(prim==4)
	{
		ret = ReadHeightmap(x,y);
	}
	else
	{
		ret = 0.0;
	}
	
	return ret;
}

vec2 GetMixFactors()
{
	vec2 ret = vec2(0.0);
	
	if(gl_TessCoord.x<0.5)
	{
		if(gl_TessCoord.y<0.5)
		{
			ret=gl_TessCoord.xy+vec2(0.5);
			mixType=1; //Bottom Left Corner
			neighIDs = ivec3(0,1,7);
		}
		else
		{
			ret=gl_TessCoord.xy+vec2(0.5,-0.5);
			mixType=4; //Top Left Corner
			neighIDs = ivec3(6,5,7);
		}
			
	}
	else
	{
		if(gl_TessCoord.y<0.5)
		{
			ret=gl_TessCoord.xy+vec2(-0.5,0.5);
			mixType=2; //Bottom Right Corner
			neighIDs = ivec3(1,2,3);

		}
		else
		{
			ret=gl_TessCoord.xy+vec2(-0.5);
			mixType=3; //Top Right Corner
			neighIDs = ivec3(5,4,3);
		}
	}
			
	return ret;
}

/* Neighbours IDs
 -----------
| 6 | 5 | 4 |
|-----------|
| 7 | C | 3 |
|-----------|
| 0 | 1 | 2 |
 -----------
*/

float GetInterpolatedHeight(float x, float y)
{
	float ret = 0.0;

	//Border chunks init
	float surroundHeight = GetHeight(x,y,8,0,1.0,1.0);
	vec3 heights = vec3(surroundHeight);
	
	//Modified chunk
	float mainHeight = GetHeight(x,y,chunkOctaves,primitive,chunkFreq,chunkSeed); //Main chunk
	float height_C = mainHeight*(chunkHeight);

	//Mix Factor
	vec2 mixFactors = GetMixFactors();
	
	if(mixType==1) 		//Bottom Left Corner
	{
		//0,1,7
		for(int i = 0; i<3;++i)
		{
			for(int j=0;j<numNeighbours;j++)
			{
				if(neighbours[j].neighbourID == neighIDs[i])
				{
					//TODO: Check if octaves are different first!
					heights[i]=GetHeight(x,y,neighbours[j].octaves,neighbours[j].primitive,neighbours[j].frequency,neighbours[j].seed)*(neighbours[j].height);
				}
			}
		}
		
		float mix_H_1 = mix(heights.x,heights.y,mixFactors.x); //Bottom
		float mix_H_2 = mix(heights.z,height_C,mixFactors.x);	// Top
		ret = mix(mix_H_1,mix_H_2,mixFactors.y);
	}
	else if(mixType==2) //Bottom Right Corner
	{
		//1,2,3
		for(int i = 0; i<3;++i)
		{
			for(int j=0;j<numNeighbours;j++)
			{
				if(neighbours[j].neighbourID == neighIDs[i])
				{
					heights[i]=GetHeight(x,y,neighbours[j].octaves,neighbours[j].primitive,neighbours[j].frequency,neighbours[j].seed)*(neighbours[j].height);
				}
			}
		}
		
		float mix_H_1 = mix(heights.x,heights.y,mixFactors.x); //Bottom
		float mix_H_2 = mix(height_C, heights.z,mixFactors.x);	// Top
		ret = mix(mix_H_1,mix_H_2,mixFactors.y);
	}
	else if(mixType==3) //Top Right Corner
	{
		//5,4,3
		for(int i = 0; i<3;++i)
		{
			for(int j=0;j<numNeighbours;j++)
			{
				if(neighbours[j].neighbourID == neighIDs[i])
				{
					heights[i]=GetHeight(x,y,neighbours[j].octaves,neighbours[j].primitive,neighbours[j].frequency,neighbours[j].seed)*(neighbours[j].height);
				}
			}
		}
		
		float mix_H_1 = mix(heights.x,heights.y,mixFactors.x); //Bottom
		float mix_H_2 = mix(height_C, heights.z,mixFactors.x);	// Top
		ret = mix(mix_H_2,mix_H_1,mixFactors.y);
		
	}
	else				//Top Left Corner
	{
		//6,5,7
		for(int i = 0; i<3;++i)
		{
			for(int j=0;j<numNeighbours;j++)
			{
				if(neighbours[j].neighbourID == neighIDs[i])
				{
					heights[i]=GetHeight(x,y,neighbours[j].octaves,neighbours[j].primitive,neighbours[j].frequency,neighbours[j].seed)*(neighbours[j].height);
				}
			}
		}
		
		float mix_H_1 = mix(heights.x,heights.y,mixFactors.x); //Bottom
		float mix_H_2 = mix(heights.z,height_C,mixFactors.x);  // Top
		ret = mix(mix_H_2,mix_H_1,mixFactors.y);
	}
		
	return ret;
}

vec3 GetVertexNormal()
{
	vec3 ret=vec3(0.0);
	float tl,l,bl,t,b,tr,r,br;
	float deltatest = 1.0/divisions;

	
	vec3 M = GetVertex(0.0,0.0);
	vec3 U = GetVertex(0.0,deltatest);
	vec3 L = GetVertex(-deltatest,0.0);
	vec3 R = GetVertex(deltatest,0.0);
	vec3 D = GetVertex(0.0,-deltatest);
	
	
	if(primitive==1)
	{
		M.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y);	
		U.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y+deltatest);	
		L.y = GetInterpolatedHeight(gl_TessCoord.x-deltatest,gl_TessCoord.y);	
		R.y = GetInterpolatedHeight(gl_TessCoord.x+deltatest,gl_TessCoord.y);	
		D.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y-deltatest);
	}
	if(primitive==2)
	{
		M.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y);	
		U.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y+deltatest);	
		L.y = GetInterpolatedHeight(gl_TessCoord.x-deltatest,gl_TessCoord.y);	
		R.y = GetInterpolatedHeight(gl_TessCoord.x+deltatest,gl_TessCoord.y);	
		D.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y-deltatest);
	}
	if(primitive==3)
	{
		M.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y);	
		U.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y+deltatest);	
		L.y = GetInterpolatedHeight(gl_TessCoord.x-deltatest,gl_TessCoord.y);	
		R.y = GetInterpolatedHeight(gl_TessCoord.x+deltatest,gl_TessCoord.y);	
		D.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y-deltatest);
	}
	if(primitive==4)
	{
		M.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y);	
		U.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y+deltatest);	
		L.y = GetInterpolatedHeight(gl_TessCoord.x-deltatest,gl_TessCoord.y);	
		R.y = GetInterpolatedHeight(gl_TessCoord.x+deltatest,gl_TessCoord.y);	
		D.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y-deltatest);
	}
	
	vec3 LM = M - L;
	vec3 MR = R - M;
	vec3 UM = M - U;
	vec3 MD = D - M;
	
	vec3 UMLM = cross(LM,UM);
	vec3 UMMR = cross(UM,MR);
	vec3 MDLM = cross(MD,LM);
	vec3 MDMR = cross(MD,MR);
	
	ret = normalize(UMLM+UMMR+MDLM+MDMR);
	ret.y = -ret.y;
	return ret;
}

void main()
{			
	WorldPos_FS_in = GetVertex(0.0,0.0);
	
	ivec2 pix_coord = ivec2(((gl_TessCoord.xy+chunkCoords)/gridSize)*100);
	
	if(primitive!=0)
	{
		Normal_FS_in = (Model * vec4(GetVertexNormal(),0.0)).xyz;
		Blend_Normal_FS_in = Normal_FS_in;
	}
	else
	{
		Normal_FS_in = vec3(0.0,1.0,0.0);
		Blend_Normal_FS_in = vec3(0.0,1.0,0.0);
	}
	
	float height=0.0;	
	
	WorldPos_FS_in.y = GetInterpolatedHeight(gl_TessCoord.x,gl_TessCoord.y);
	
	MapPos_FS_in=WorldPos_FS_in.y/maxHeight;
	
	WorldPos_FS_in = (Model * vec4(WorldPos_FS_in,1.0)).xyz;
	
	uvCoords = gl_TessCoord.xy;
	
	Color_FS_in = vec3(0.5);
	
	if(selected==1)
	{
		Color_FS_in=vec3(1.0,1.0,0.5);
	}
		
	texColor_FS_in = vec3(height);
	
	imageStore(exportTexture, pix_coord, vec4(texColor_FS_in, 1.0));


	gl_Position = Projection * View * vec4(WorldPos_FS_in, 1.0);
	
	//Export vars
	TFPosition = WorldPos_FS_in;
	TFNormal = Normal_FS_in;
	TFColor = vec3(gl_TessCoord.xy,0.0);
}